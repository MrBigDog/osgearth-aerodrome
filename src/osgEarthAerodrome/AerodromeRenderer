/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2014 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_AERODROME_AERODROMERENDERVISITOR
#define OSGEARTH_AERODROME_AERODROMERENDERVISITOR 1

#include <osg/Group>
#include <osg/NodeVisitor>

#include <osgEarthFeatures/Feature>
#include <osgEarth/Map>

#include "Common"
#include "AerodromeNode"
#include "LightBeaconNode"
#include "LightIndicatorNode"
#include "LinearFeatureNode"
#include "PavementNode"
#include "RunwayNode"
#include "RunwayThresholdNode"
#include "StartupLocationNode"
#include "StopwayNode"
#include "TaxiwayNode"
#include "TerminalNode"
#include "WindsockNode"

namespace osgEarth { namespace Aerodrome
{
    using namespace osgEarth;

    /**
     * Aerodrome
     */
    class OSGEARTHAERODROME_EXPORT AerodromeRenderer : public osg::NodeVisitor
    {
    public:

        AerodromeRenderer(Map* map);

        virtual void apply(AerodromeNode& node);
        virtual void apply(LightBeaconNode& node);
        virtual void apply(LightIndicatorNode& node);
        virtual void apply(LinearFeatureNode& node);
        virtual void apply(PavementNode& node);
        virtual void apply(RunwayNode& node);
        virtual void apply(RunwayThresholdNode& node);
        virtual void apply(StartupLocationNode& node);
        virtual void apply(StopwayNode& node);
        virtual void apply(TaxiwayNode& node);
        virtual void apply(TerminalNode& node);
        virtual void apply(WindsockNode& node);

        virtual void apply(osg::Group& node);

        osg::Node* randomFeatureRenderer(osgEarth::Features::Feature* feature, float height=-1.0f);

    protected:

        osg::ref_ptr<Map> _map;
        osgEarth::Bounds _bounds;
    };

} } // namespace osgEarth::Aerodrome

#endif // OSGEARTH_AERODROME_AERODROMERENDERVISITOR
