/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
* Copyright 2008-2014 Pelican Mapping
* http://osgearth.org
*
* osgEarth is free software; you can redistribute it and/or modify
* it under the terms of the GNU Lesser General Public License as published by
* the Free Software Foundation; either version 2 of the License, or
* (at your option) any later version.
*
* This program is distributed in the hope that it will be useful,
* but WITHOUT ANY WARRANTY; without even the implied warranty of
* MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
* GNU Lesser General Public License for more details.
*
* You should have received a copy of the GNU Lesser General Public License
* along with this program.  If not, see <http://www.gnu.org/licenses/>
*/
#ifndef OSGEARTH_AERODROME_AERODROMEFACTORY
#define OSGEARTH_AERODROME_AERODROMEFACTORY 1

#include <osg/Group>

#include "Common"
#include "AerodromeModelGraph"
#include "AerodromeNode"
#include "AerodromeCatalog"
#include "AerodromeFeatureOptions"
#include "StopwayNode"
#include <osgEarth/Map>


namespace osgEarth { namespace Aerodrome
{
    using namespace osgEarth;
    using namespace osgEarth::Features;

    /**
     * Aerodrome
     */
    class OSGEARTHAERODROME_EXPORT AerodromeFactory
    {
    public:

        AerodromeFactory(const Map* map);

        virtual ~AerodromeFactory() { }

        // creates aerodromes from AerodromeCatalog file
        osg::Group* createAerodromes(const URI& uri, const osgDB::Options* options=0L);

        // creates aerodromes from AerodromeCatalog
        osg::Group* createAerodromes(AerodromeCatalog* catalog, const osgDB::Options* options=0L);

    protected:

        template <typename T, typename Y, typename P> void createFeatureNodes(P featureOpts, AerodromeModelGraph* graph, const osgDB::Options* options, void (AerodromeFactory::*processor)(T* node, AerodromeModelGraph* graph)=0L);
        void createBoundaryNodes(BoundaryFeatureOptions boundaryOpts, AerodromeModelGraph* graph, const osgDB::Options* options);

        void processStopwayNode(StopwayNode* stopway, AerodromeModelGraph* graph);

        osg::ref_ptr<const Map> _map;
    };

} } // namespace osgEarth::Aerodrome

#endif // OSGEARTH_AERODROME_AERODROMEFACTORY
