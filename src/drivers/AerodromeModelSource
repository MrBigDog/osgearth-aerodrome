/* -*-c++-*- */
/* osgEarth - Dynamic map generation toolkit for OpenSceneGraph
 * Copyright 2008-2014 Pelican Mapping
 * http://osgearth.org
 *
 * osgEarth is free software; you can redistribute it and/or modify
 * it under the terms of the GNU Lesser General Public License as published by
 * the Free Software Foundation; either version 2 of the License, or
 * (at your option) any later version.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU Lesser General Public License for more details.
 *
 * You should have received a copy of the GNU Lesser General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>
 */

#ifndef OSGEARTH_DRIVERS_AERODROME_MODEL_SOURCE
#define OSGEARTH_DRIVERS_AERODROME_MODEL_SOURCE 1

#include <osgEarth/ModelSource>
#include <osgEarth/Registry>
#include <osgEarth/Map>
#include <osgEarthFeatures/GeometryCompiler>

#include <osg/Notify>
#include <osgDB/FileNameUtils>
#include <osgEarthAerodrome/AerodromeNode>
#include <osgEarthAerodrome/AerodromeCatalog>

namespace osgEarth { namespace Drivers { namespace Aerodrome
{
    using namespace osgEarth;
    using namespace osgEarth::Aerodrome;
    
    /**
     * A ModelSource that renders Feature data from a FeatureSource.
     */
    class AerodromeModelSource : public ModelSource
    {
    public:
        /**
         * Constructs a new feature model source with the provided options.
         */
        AerodromeModelSource( const ModelSourceOptions& options );


    public: // ModelSource

        virtual void initialize( const osgDB::Options* dbOptions =0L );

        virtual osg::Node* createNodeImplementation(
            const Map*            map,
            ProgressCallback*     progress );
    
    //public: // properties:

        /** Sets a feature source. */
        //void setFeatureSource( FeatureSource* source );

        /** The underlying feature source. */
        //FeatureSource* getFeatureSource() { return _features.get(); }

    protected:

        /** DTOR is protected to prevent this object from being allocated on the stack */
        virtual ~AerodromeModelSource() { }

        const ModelSourceOptions _options;
        osg::ref_ptr<AerodromeCatalog> _catalog;
        //osg::ref_ptr<const osgDB::Options> _dbOptions;

    };

} } } // namespace osgEarth::Drivers::Aerodrome

#endif // OSGEARTH_DRIVERS_AERODROME_MODEL_SOURCE

